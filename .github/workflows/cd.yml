name: CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  DOTNET_VERSION: 7.0.102
  CSPROJ_PATH: ./src/TodoTxtDaemon/TodoTxtDaemon.csproj
  UNIT_TESTS_PATH: ./tests/TodoTxtDaemon.UnitTests
  MIN_COVERAGE: 90
  GIST_ID: 7a452b2e1203da1c42a40281ad043fd3
  APP_NAME: TodoTxtDaemon

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.changed-src.outputs.changed }}
    steps:

      - name: Get timestamp
        run: echo "TIMESTAMP=$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Run unit tests
        run: >
          dotnet test --no-build --configuration Release --filter UnitTests --logger html 
          --collect:"XPlat Code Coverage" --results-directory ${{ env.UNIT_TESTS_PATH }}/coverage

      - name: Run integration tests
        run: dotnet test --no-build --configuration Release --filter IntegrationTests --logger html

      - name: Upload test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: TestResults-${{ env.TIMESTAMP }}
          path: |
            '**/TestResults'
            '**/*.received.*'

      - name: Generate test coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.17
        with:
          reports: '${{ env.UNIT_TESTS_PATH }}/coverage/**/coverage.cobertura.xml'
          targetdir: '${{ env.UNIT_TESTS_PATH }}/TestCoverageReport'
          filefilters: '-**/Program.cs'
          reporttypes: 'Html;CsvSummary'

      - name: Set up Stryker
        run: dotnet tool install dotnet-stryker --tool-path ./tools
        working-directory: ${{ env.UNIT_TESTS_PATH }}

      - name: Run mutation tests
        run: ./tools/dotnet-stryker --config-file stryker-config.yaml
        working-directory: ${{ env.UNIT_TESTS_PATH }}

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: CoverageReport-${{ env.TIMESTAMP }}
          path: |
            ${{ env.UNIT_TESTS_PATH }}/TestCoverageReport/
            ${{ env.UNIT_TESTS_PATH }}/StrykerOutput/

      - name: Analyze coverage report
        id: analyze-coverage-report
        run: |
          set_output() {
            if [[ -z $3 ]]; then
              echo "::error::Got an empty value for $1."
              exit 1
            fi
            echo "$1=$3$4" >> $GITHUB_OUTPUT
            echo "* $2: **$3$4**" >> $GITHUB_STEP_SUMMARY
          }
          set_lines_of_code() {
            if [[ ${#1} -lt 4 ]]; then
              set_output "lines_of_code" "Lines of code" "$1"
            elif [[ ${#1} -eq 4 ]]; then
              set_output "lines_of_code" "Lines of code" "${1::1}.${1:1:1}" "k"
            elif [[ ${#1} -eq 5 ]]; then
              set_output "lines_of_code" "Lines of code" "${1:0:2}" "k"
            elif [[ ${#1} -eq 6 ]]; then
              set_output "lines_of_code" "Lines of code" "${1:0:3}" "k"
            else
              echo "::error::Got an unsupported value $1 for lines_of_code."
              exit 1
            fi
          }
          check_coverage() {
            if [[ $1 -lt ${{ env.MIN_COVERAGE }} || $2 -lt ${{ env.MIN_COVERAGE }} ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**ERROR: The code coverage is insufficient.**" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          }
          lines_of_code=$(cat ./TestCoverageReport/Summary.csv | grep -Po '(?<=Total lines:;)[0-9]+')
          set_lines_of_code "$lines_of_code"
          test_coverage=$(cat ./TestCoverageReport/Summary.csv | grep -Po '(?<=Line coverage:;)[0-9]+')
          set_output "test_coverage" "Test coverage" "$test_coverage" "%"
          mutation_report_path=$(find ./StrykerOutput -name mutation-report.md)
          mutation_score=$(cat $mutation_report_path | grep -Po '(?<=## The final mutation score is )[0-9]+')
          set_output "mutation_score" "Mutation score" "$mutation_score" "%"
          check_coverage "$test_coverage" "$mutation_score"
        working-directory: ${{ env.UNIT_TESTS_PATH }}

      - name: Update lines of code gist
        if: ${{ github.event_name == 'push' }}
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: ${{ env.GIST_ID }}
          filename: lines-of-code.json
          label: loc
          message: ${{ steps.analyze-coverage-report.outputs.lines_of_code }}
          color: blue

      - name: Update test coverage gist
        if: ${{ github.event_name == 'push' }}
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: ${{ env.GIST_ID }}
          filename: test-coverage.json
          label: test coverage
          message: ${{ steps.analyze-coverage-report.outputs.test_coverage }}
          color: brightgreen

      - name: Update mutation score gist
        if: ${{ github.event_name == 'push' }}
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: ${{ env.GIST_ID }}
          filename: mutation-score.json
          label: mutation score
          message: ${{ steps.analyze-coverage-report.outputs.mutation_score }}
          color: brightgreen

      - name: Check src/ for changes
        if: ${{ github.event_name == 'push' }}
        id: changed-src
        uses: marceloprado/has-changed-path@v1.0.1
        with:
          paths: ./src
  
  release:
    name: Release
    needs: build
    if: ${{ needs.build.outputs.should-release == 'true' }}
    runs-on: ubuntu-latest
    steps:

      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get package version
        run: echo "VERSION=$(cat ./${{ env.CSPROJ_PATH }} | grep -Po '(?<=Version>).*(?=</Version>)')" >> $GITHUB_ENV

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.CSPROJ_PATH }}

      - name: Create win-x64 package
        run: dotnet publish --no-restore --configuration Release --output ./win-x64 --runtime win-x64 --no-self-contained ${{ env.CSPROJ_PATH }}

      - name: Archive win-x64 package
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          directory: ./win-x64
          filename: ${{ env.APP_NAME }}-${{ env.VERSION }}-win-x64.zip

      - name: Create win-x64-self-contained package
        run: dotnet publish --no-restore --configuration Release --output ./win-x64-self-contained --runtime win-x64 --self-contained ${{ env.CSPROJ_PATH }}

      - name: Archive win-x64-self-contained package
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          directory: ./win-x64-self-contained
          filename: ${{ env.APP_NAME }}-${{ env.VERSION }}-win-x64-self-contained.zip

      - name: Create osx-x64 package
        run: dotnet publish --no-restore --configuration Release --output ./osx-x64 --runtime osx-x64 --no-self-contained ${{ env.CSPROJ_PATH }}

      - name: Archive osx-x64 package
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          directory: ./osx-x64
          filename: ${{ env.APP_NAME }}-${{ env.VERSION }}-osx-x64.zip

      - name: Create osx-x64-self-contained package
        run: dotnet publish --no-restore --configuration Release --output ./osx-x64-self-contained --runtime osx-x64 --self-contained ${{ env.CSPROJ_PATH }}

      - name: Archive osx-x64-self-contained package
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          directory: ./osx-x64-self-contained
          filename: ${{ env.APP_NAME }}-${{ env.VERSION }}-osx-x64-self-contained.zip

      - name: Create linux-x64 package
        run: dotnet publish --no-restore --configuration Release --output ./linux-x64 --runtime linux-x64 --no-self-contained ${{ env.CSPROJ_PATH }}

      - name: Archive linux-x64 package
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          directory: ./linux-x64
          filename: ${{ env.APP_NAME }}-${{ env.VERSION }}-linux-x64.zip

      - name: Create linux-x64-self-contained package
        run: dotnet publish --no-restore --configuration Release --output ./linux-x64-self-contained --runtime linux-x64 --self-contained ${{ env.CSPROJ_PATH }}

      - name: Archive linux-x64-self-contained package
        uses: thedoctor0/zip-release@master
        with:
          type: zip
          directory: ./linux-x64-self-contained
          filename: ${{ env.APP_NAME }}-${{ env.VERSION }}-linux-x64-self-contained.zip

      - name: Generate release description
        run: csplit ./CHANGELOG.md '/## \[/' {*} && tail -n +2 xx01 > release_description.md

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.VERSION }}
          artifacts: "**/*.zip"
          bodyfile: release_description.md
          token: ${{ secrets.GITHUB_TOKEN }}
